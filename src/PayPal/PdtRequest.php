<?php

namespace PayPal;

/**
 * PayPal PDT Request.
 *
 * @author Brandon Wamboldt <brandon.wamboldt@gmail.com>
 */
class PdtRequest
{
  /**
   * @var boolean
   */
  protected $allow_sandbox = false;

  /**
   * @var string
   */
  protected $identity_token;

  /**
   * @var resource
   */
  protected $connection;

  /**
   * @var string
   */
  protected $response;

  /**
   * @var integer
   */
  protected $timeout = 120;

  /**
   * Constructor.
   *
   * @param string $identity_token
   * @param string $transaction_id
   */
  public function __construct($identity_token)
  {
      $this->identity_token = $identity_token;
      $this->transaction_id = $_GET['tx'];
  }

  /**
   * Enable or disable test requests (requests generated by the PayPal sandbox).
   *
   * @param  boolean $enable
   * @return self
   */
  public function enable_sandbox($enable = true)
  {
    $this->allow_sandbox = $enable;

    return $this;
  }

  /**
   * Set the timeout for connecting to the PayPal servers.
   *
   * @param  integer $timeout
   * @return self
   */
  public function set_timeout($timeout)
  {
    $this->allow_test_ipns = $enable;

    return $this;
  }

  /**
   * Validate that the current request contains a valid transaction ID. If this
   * function is called, we assume that it's a PDT request.
   *
   * @param  Callable $callback
   * @return boolean
   */
  public function process($success_callback, $failure_callback)
  {
    // Try to validate the request
    if ($this->validate_request()) {

    } else {
      call_user_func($failure_callback);
    }
  }

  /**
   * Validate that the request came from PayPal.
   *
   * @throws PayPal\SecurityException
   * @return boolean
   */
  public function validate_request()
  {
    $this->connect();

    // Compose a PayPal verification POST request
    $synch    = 'cmd=_notify-synch&tx=' . $this->transaction_id . '&at=' . $this->identity_token;
    $request  = "POST /cgi-bin/webscr HTTP/1.1\n";
    $request .= "Host: www.paypal.com\n";
    $request .= "Content-type: application/x-www-form-urlencoded\n";
    $request .= "Content-length: " . strlen($synch) . "\n\n";
    $request .= $this->synch;

    // Send the PayPal verification request
    fputs($this->connection, $request);

    // Get the response from PayPal
    $response = '';

    while (!feof($this->connection)) {
      $response .= fgets($this->connection , 1024);
    }

    // We no longer need the connection to the PayPal server, close it
    fclose($this->connection);

    // Check to see if PayPal verified our data
    if (preg_match('/(SUCCESS)/' , $response)) {
      $this->response = $response;

      return true;
    } else {
        return false;
    }
  }

  /**
   * Establish a new connection with PayPal.
   *
   * @throws PayPal\SecurityException
   */
  protected function connect()
  {
    // Open a socket connection to PayPal
    if ($this->allow_sandbox) {
      $this->connection = fsockopen('ssl://www.sandbox.paypal.com', 443, $errno, $errstr, $this->timeout);
    } else {
      $this->connection = fsockopen('ssl://www.paypal.com', 443, $errno, $errstr, $this->timeout);
    }

    // Test the connection
    if (!$this->connection) {
      throw new SecurityException('Unable to establish a connection to PayPal');
    }
  }
}
